type Client {
  id: ID
  nombre: String
  apellido: String
  empresa: String
  emails: [Email]
  edad: Int
  tipo: ClientType
  pedidos: [Order]
}

type Product {
  id: ID
  nombre: String
  precio: Int
  stock: Int
}

type Email {
  email: String
}

type Order {
  id: ID
  pedido: [ProductOrder]
  total: Int
  fecha: String
  estado: OrderState
  cliente: ID # in mongoose we defined this row as String, but here we defined as an ID because is not the same for Graphql
}

type ProductOrder {
  id: ID
  cantidad: Int
}

"""
Top clients type
"""
type ClientTotal {
  total: Float
  cliente: [Client]
}

"""
Type of Users
"""
type User {
  user: String
}

"""
JWT token
"""
type Token {
  token: String
}
"""
Assigns category of clients
"""
enum ClientType {
  BASICO
  PREMIUM
}

"""
Assings state of the orders
"""
enum OrderState {
  PENDIENTE
  COMPLETADO
  CANCELADO
}

type Query {
  getClient(id: ID): Client
  getClients(limit: Int, offset: Int): [Client]
  totalClients: String

  #Products
  getProducts(limit: Int, offset: Int, stock: Boolean): [Product]
  getProduct(id: ID): Product
  totalProducts: String

  #Orders
  getOrders(cliente: String): [Order]

  #Graphics
  topClients: [ClientTotal]

  #Users
  getUser: User
}

# input OrderInput {
#   producto: String
#   precio: Int
# }

input EmailInput {
  email: String
}

input ClientInput {
  id: ID
  nombre: String!
  apellido: String!
  empresa: String!
  emails: [EmailInput]
  edad: Int!
  tipo: ClientType!
  pedidos: [OrderInput]
}

input ProductInput {
  id: ID
  nombre: String!
  precio: Int!
  stock: Int!
}

input OrderInput {
  id: ID
  pedido: [ProductOrderInput]
  total: Int
  fecha: String
  cliente: ID # in mongoose we defined this row as String, but here we defined as an ID because is not the same for Graphql
  estado: OrderState
}

input ProductOrderInput {
  id: ID
  cantidad: Int
}

"""
Mutations to create new clients and Products and Orders
"""
type Mutation {
  # Name of Resolver, input with Data and Value that returns
  """
  Creates the client
  """
  createClient(input: ClientInput): Client
  updateClient(input: ClientInput): Client
  deleteClient(id: ID): String
  #Products
  createProduct(input: ProductInput): Product
  updateProduct(input: ProductInput): Product
  deleteProduct(id: ID): String
  #Orders
  newOrder(input: OrderInput): Order
  updateOrder(input: OrderInput): String
  # Users
  """
  Create a unique user, if there's already a user with the same nae it returns an error
  """
  createUser(user: String!, password: String!): String
  """
  Auth user
  """
  authUser(user: String!, password: String!): Token
}
